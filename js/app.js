// Generated by CoffeeScript 1.9.0
var IStorage, QList, QLocalStorage, QManager, QRelation,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

(function() {
  return this.uniqid = function(pr, en) {
    var result, us;
    pr = pr || "";
    en = en || false;
    result = void 0;
    us = void 0;
    this.seed = function(s, w) {
      s = parseInt(s, 10).toString(16);
      if (w < s.length) {
        return s.slice(s.length - w);
      } else {
        if (w > s.length) {
          return new Array(1 + (w - s.length)).join("0") + s;
        } else {
          return s;
        }
      }
    };
    result = pr + this.seed(parseInt(new Date().getTime() / 1000, 10), 8) + this.seed(Math.floor(Math.random() * 0x75bcd15) + 1, 5);
    if (en) {
      result += (Math.random() * 10).toFixed(8).toString();
    }
    return result;
  };
})();

IStorage = (function() {
  function IStorage() {
    this.initStorage();
  }

  IStorage.prototype.initStorage = function() {
    throw false;
  };

  IStorage.prototype.get = function(key) {
    throw false;
  };

  IStorage.prototype.set = function(key, val) {
    throw false;
  };

  IStorage.prototype["delete"] = function(key) {
    throw false;
  };

  IStorage.prototype.getStorage = function() {
    throw false;
  };

  return IStorage;

})();

QLocalStorage = (function(_super) {
  __extends(QLocalStorage, _super);

  function QLocalStorage() {
    return QLocalStorage.__super__.constructor.apply(this, arguments);
  }

  QLocalStorage.prototype.storage = null;

  QLocalStorage.prototype.initStorage = function() {
    var error;
    try {
      this.storage = localStorage;
    } catch (_error) {
      error = _error;
      console.log(error);
    }
    return null;
  };

  QLocalStorage.prototype.getStorage = function() {
    return this.storage;
  };

  QLocalStorage.prototype.get = function(key) {
    return JSON.parse(this.storage.getItem(key));
  };

  QLocalStorage.prototype.set = function(key, val) {
    this.storage.setItem(key, JSON.stringify(val));
    return null;
  };

  QLocalStorage.prototype["delete"] = function(key) {
    this.storage.removeItem(key);
    return null;
  };

  return QLocalStorage;

})(IStorage);

QManager = (function() {
  QManager.prototype.storage = null;

  QManager.prototype.instance = null;

  QManager.prototype.relation = null;

  function QManager() {
    if (this.storage == null) {
      throw false;
    }
    this.relation = new QRelation(this.storage);
    this;
  }

  QManager.prototype.GetRelation = function() {
    return this.relation;
  };

  QManager.prototype.SetStorage = function(IStorage) {
    this.storage = IStorage;
    return null;
  };

  QManager.prototype.GetInstance = function() {
    if (this.instance != null) {
      return this.instance;
    } else {
      this.instance = new this.constructor();
      return this.instance;
    }
  };

  QManager.prototype.Create = function(json) {
    var __id;
    if (__id = this.relation.newRow()) {
      this.storage.set(__id, json);
      return __id;
    }
    return false;
  };

  QManager.prototype.Read = function(__id) {
    if (this.relation.findById(__id) === true) {
      return this.storage.get(__id);
    }
    return false;
  };

  QManager.prototype.Update = function(__id, json) {
    var row;
    if (this.relation.findById(__id) === false) {
      throw false;
    }
    if (row = this.Read(__id)) {
      this.storage.set(__id, json);
      return true;
    }
    return false;
  };

  QManager.prototype.Delete = function(__id) {
    var row;
    if (this.relation.findById(__id) === true && (row = this.Read(__id))) {
      if (this.relation.remove(__id) === true) {
        this.storage["delete"](__id);
      }
      return true;
    }
    return false;
  };

  return QManager;

})();

QRelation = (function() {
  QRelation.prototype.storage = null;

  QRelation.prototype.KEY = 'relation';

  function QRelation(_at_storage) {
    this.storage = _at_storage;
    if (this.storage.get(this.KEY) == null) {
      this.storage.set(this.KEY, []);
    }
  }

  QRelation.prototype.getRelation = function() {
    var relation;
    relation = this.storage.get(this.KEY);
    if ((relation == null) || relation.length === 0) {
      relation = [];
    }
    if (relation.length !== 0) {
      relation = relation;
    }
    return relation;
  };

  QRelation.prototype.newRow = function() {
    var relation, __id;
    __id = uniqid('book_');
    relation = this.getRelation();
    relation.push(__id);
    this.storage.set(this.KEY, relation);
    return __id;
  };

  QRelation.prototype.findById = function(__id) {
    var relation;
    if (relation = this.storage.get(this.KEY)) {
      return __indexOf.call(relation, __id) >= 0;
    }
    return false;
  };

  QRelation.prototype.remove = function(__id) {
    var item, relation, __relation, _i, _len;
    if (this.findById(__id) === true) {
      relation = this.getRelation();
      __relation = [];
      for (_i = 0, _len = relation.length; _i < _len; _i++) {
        item = relation[_i];
        if (item !== __id) {
          __relation.push(item);
        }
      }
      this.storage.set(this.KEY, __relation);
      return true;
    }
  };

  return QRelation;

})();

QList = (function() {
  function QList() {}

  QList.prototype.getTemplate = function() {
    return $('div#templates .table-tr tr').clone();
  };

  QList.prototype.fill = function() {
    var Relations, __id, _i, _len, _ref, _results;
    Relations = QManager.prototype.GetInstance().GetRelation().getRelation();
    _ref = Relations.reverse();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      __id = _ref[_i];
      _results.push(this.pushItem(__id));
    }
    return _results;
  };

  QList.prototype.pushItem = function(__id) {
    var $tr, row;
    row = QManager.prototype.GetInstance().Read(__id);
    $tr = this.getTemplate();
    $tr.find('.author').text(row.author);
    $tr.find('.title').text(row.title);
    $tr.attr('bid', __id);
    return $('.list-book tbody').append($tr);
  };

  return QList;

})();

$(function() {
  var qList, qls;
  qls = new QLocalStorage();
  QManager.prototype.SetStorage(qls);
  qList = new QList();
  qList.fill();
  $('.btn-edit').click(function(e) {
    var T, row, __id;
    T = $(e.currentTarget);
    __id = T.parents('tr:first').attr('bid');
    row = QManager.prototype.GetInstance().Read(__id);
    $('#book-editor #author').val(row.author);
    $('#book-editor #year').val(row.year);
    $('#book-editor #title').val(row.title);
    $('#book-editor #numberPages').val(row.countPages);
  });
  $('.btn-remove').click(function(e) {
    var $tr, T, __id;
    T = $(e.currentTarget);
    $tr = T.parents('tr:first');
    __id = $tr.attr('bid');
    QManager.prototype.GetInstance().Delete(__id);
    $tr.remove();
  });
});
